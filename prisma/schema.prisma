generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @map("id")

  email    String @unique
  password String

  notificationPreferences String?
  lastPasswordResetAt     DateTime?
  role                    UserRole  @default(USER)

  profile            Profile?
  eventRegistrations EventRegistration[]
  events             Event[]

  JobListing     JobListing[]
  JobApplication JobApplication[]
  SavedJob       SavedJob[]

  followers Followers[] @relation("following")
  following Followers[] @relation("follower")

  resources Resource[]

  mentorProfile MentorProfile?

  menteeProfile MenteeProfile?

  mentorshipPrograms MentorshipProgram[]

  mentorSessions MentorshipSession[] @relation("MentorSessions")
  menteeSessions MentorshipSession[] @relation("MenteeSessions")

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Message Model
model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String   @db.Text
  sentAt     DateTime @default(now())
  isRead     Boolean  @default(false)

  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@map("messages")
}

model Profile {
  id                 String   @id @default(uuid())
  firstName          String   @map("firstName")
  lastName           String   @map("lastName")
  phone              String
  streetAddress      String
  city               String
  state              String
  postalCode         String
  dob                DateTime
  academicBackground String?
  interests          String?
  skills             String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Event {
  id                   String    @id @default(uuid())
  title                String
  description          String?
  eventType            EventType
  startDate            DateTime
  endDate              DateTime
  location             String?
  isVirtual            Boolean   @default(false)
  maxAttendees         Int?
  registrationDeadline DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  sessions      EventSession[]
  registrations EventRegistration[]

  createdAt   DateTime @default(now())
  lastUpdated DateTime @updatedAt

  @@map("events")
}

model EventSession {
  id           String    @id @default(uuid())
  title        String
  description  String?
  startTime    DateTime?
  endTime      DateTime?
  location     String?
  maxAttendees Int?

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  registrations EventRegistration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("event_sessions")
}

model EventRegistration {
  id          String   @id @default(uuid())
  bookingDate DateTime @default(now())

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  session   EventSession @relation(fields: [sessionId], references: [id])
  sessionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("event_registrations")
}

enum EventType {
  CONFERENCE
  WORKSHOP
  SEMINAR
}

// Follower Model
model Followers {
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("Follows")
}

// JobListing Model
model JobListing {
  id                  String           @id @default(uuid())
  title               String
  company             String
  location            String?
  listingType         ListingType
  jobType             JobType
  workArrangement     WorkArrangement
  isInternshipPaid    Boolean?
  description         String           @db.Text
  requirements        String?
  responsibilities    String?
  salaryRange         String?
  applicationDeadline DateTime?
  startDate           DateTime?
  duration            String?
  postedBy            String
  postedAt            DateTime         @default(now())
  lastUpdated         DateTime         @updatedAt
  status              Status           @default(Open)
  user                User             @relation(fields: [postedBy], references: [id])
  requiredSkills      RequiredSkill[]
  applications        JobApplication[]
  savedJobs           SavedJob[]

  @@map("job_listings")
}

// RequiredSkill Model
model RequiredSkill {
  id        String @id @default(uuid())
  skillName String

  job   JobListing @relation(fields: [jobId], references: [id])
  jobId String

  @@map("required_skills")
}

// JobApplication Model
model JobApplication {
  id                       String   @id @default(uuid())
  resumeURL                String?
  coverLetterURL           String?
  linkedInURL              String?
  additionalDocumentsR2URL String?
  applicationStatus        String?
  submittedAt              DateTime @default(now())
  lastUpdated              DateTime @updatedAt
  notes                    String?

  job   JobListing @relation(fields: [jobId], references: [id])
  jobId String

  applicant   User   @relation(fields: [applicantId], references: [id])
  applicantId String

  @@map("job_applications")
}

// SavedJob Model
model SavedJob {
  id      String   @id @default(uuid())
  savedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  job   JobListing @relation(fields: [jobId], references: [id])
  jobId String

  @@map("saved_jobs")
}

// Resource Model
model Resource {
  id          String   @id @default(uuid())
  title       String
  description String?
  type        String?
  url         String
  tags        String?
  createdAt   DateTime @default(now())
  uploadedBy  String

  user User @relation(fields: [uploadedBy], references: [id])

  @@map("resources")
}

// MentorProfile Model
model MentorProfile {
  id                String  @id @default(uuid())
  userId            String  @unique
  expertise         String?
  yearsOfExperience Int?
  maxMentees        Int?
  user              User    @relation(fields: [userId], references: [id])

  @@map("mentor_profiles")
}

// MenteeProfile Model
model MenteeProfile {
  id                     String    @id @default(uuid())
  userId                 String    @unique
  academicLevel          String?
  fieldOfStudy           String?
  careerGoals            String?
  areasOfInterest        String?
  expectedGraduationDate DateTime?
  user                   User      @relation(fields: [userId], references: [id])

  @@map("mentee_profiles")
}

// MentorshipProgram Model
model MentorshipProgram {
  id              String    @id @default(uuid())
  name            String
  description     String?
  startDate       DateTime?
  endDate         DateTime?
  programType     String?
  maxParticipants Int?
  status          String?
  createdBy       String
  createdAt       DateTime  @default(now())
  user            User      @relation(fields: [createdBy], references: [id])

  @@map("mentorship_programs")
}

enum UserRole {
  ADMIN
  EMPLOYER
  MENTOR
  ORGANIZER
  USER
}

// Enums
enum ListingType {
  Job
  Internship
}

enum JobType {
  Full_time
  Part_time
  Contract
}

enum WorkArrangement {
  On_site
  Remote
  Hybrid
}

enum Status {
  Open
  Closed
  Filled
}

model MentorshipSession {
  id                     String           @id @default(uuid())
  sessionDate            DateTime?
  startTime              DateTime?
  endTime                DateTime?
  sessionType            String?
  status                 MentorshipStatus @default(PENDING)
  message                String?          @db.Text
  academicLevel          String?
  fieldOfStudy           String?
  careerGoals            String?
  areasOfInterest        String?
  expectedGraduationDate DateTime?

  mentor   User   @relation("MentorSessions", fields: [mentorId], references: [id])
  mentorId String
  mentee   User   @relation("MenteeSessions", fields: [menteeId], references: [id])
  menteeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mentorship_sessions")
}

enum MentorshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}
